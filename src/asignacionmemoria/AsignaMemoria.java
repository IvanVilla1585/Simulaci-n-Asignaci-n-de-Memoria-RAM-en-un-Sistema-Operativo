/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asignacionmemoria;

/**
 *
 * @author Helen
 */
import javax.swing.JOptionPane;
import Nodos.*;
import Listas.*;
import Identidades.*;
import java.awt.Color;
import com.toedter.calendar.JDateChooser;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class AsignaMemoria extends javax.swing.JFrame {

    /**
     * Creates new form AsignaMemoria
     */
    Memoria memo;
    ListaMemoria listamemo;
    public int Cont = 0, Cont2 = 0;
    NodoMemoria auxi;
    int acum = 0, acum2, control = 0;
    int sw = 0;
    ListaAuxiliar listam;
    ListaDisco listadisco;
    int ContDisco = 0;

    public AsignaMemoria() {

        initComponents();
        listamemo = new ListaMemoria();
        listadisco = new ListaDisco();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTamaño = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        botonGuardar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtBloque1 = new javax.swing.JTextField();
        txtBloque11 = new javax.swing.JTextField();
        txtEstado1 = new javax.swing.JTextField();
        txtEstado11 = new javax.swing.JTextField();
        txtEstado12 = new javax.swing.JTextField();
        txtBloque4 = new javax.swing.JTextField();
        txtBloque12 = new javax.swing.JTextField();
        txtEstado3 = new javax.swing.JTextField();
        txtBloque3 = new javax.swing.JTextField();
        txtEstado2 = new javax.swing.JTextField();
        txtBloque2 = new javax.swing.JTextField();
        txtEstado4 = new javax.swing.JTextField();
        txtBloque5 = new javax.swing.JTextField();
        txtEstado5 = new javax.swing.JTextField();
        txtBloque6 = new javax.swing.JTextField();
        txtEstado6 = new javax.swing.JTextField();
        txtEstado9 = new javax.swing.JTextField();
        txtBloque10 = new javax.swing.JTextField();
        txtEstado10 = new javax.swing.JTextField();
        txtEstado8 = new javax.swing.JTextField();
        txtBloque9 = new javax.swing.JTextField();
        txtBloque7 = new javax.swing.JTextField();
        txtEstado7 = new javax.swing.JTextField();
        txtBloque8 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelTotal2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jLabel9.setText("jLabel9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Asignacion de Memoria");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Llenar la Lista de Memoria Disponible", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Ingrese el Tamaño del Bloque de Memoria:");

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("El Tamaño es entre 1 y 50");

        botonGuardar.setText("Guardar");
        botonGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGuardarMouseClicked(evt);
            }
        });
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Mb");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(botonGuardar)
                .addGap(335, 335, 335))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTamaño, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTamaño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, txtTamaño});

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Lista de Memoria Disponible", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        txtBloque1.setEnabled(false);
        txtBloque1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloque1ActionPerformed(evt);
            }
        });

        txtBloque11.setEnabled(false);

        txtEstado1.setEnabled(false);

        txtEstado11.setEnabled(false);

        txtEstado12.setEnabled(false);

        txtBloque4.setEnabled(false);

        txtBloque12.setEnabled(false);

        txtEstado3.setEnabled(false);

        txtBloque3.setEnabled(false);

        txtEstado2.setEnabled(false);

        txtBloque2.setEnabled(false);

        txtEstado4.setEnabled(false);

        txtBloque5.setEnabled(false);

        txtEstado5.setEnabled(false);

        txtBloque6.setEnabled(false);

        txtEstado6.setEnabled(false);

        txtEstado9.setEnabled(false);

        txtBloque10.setEnabled(false);

        txtEstado10.setEnabled(false);

        txtEstado8.setEnabled(false);

        txtBloque9.setEnabled(false);

        txtBloque7.setEnabled(false);

        txtEstado7.setEnabled(false);

        txtBloque8.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("MEMORIA TOTAL: ");

        labelTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Mb");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("MEMORIA DISPONIBLE: ");

        labelTotal2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Mb");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtBloque1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBloque7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtBloque2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBloque8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBloque3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBloque9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtBloque4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtEstado9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(txtBloque10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtEstado4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(txtBloque5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEstado5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtEstado10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(txtBloque11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEstado11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(49, 49, 49)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtBloque6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEstado6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtBloque12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtEstado12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelTotal2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel10)))
                                .addGap(27, 27, 27))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel5)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBloque1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEstado12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBloque7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelTotal2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Asignar Memoria", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Ingrese el tamaño de memoria requerido :");

        txtCantidad.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Mb");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Opciones para Asignar Memoria", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("Primer Ajuste");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton2.setText("Mejor Ajuste");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton3.setText("Peor Ajuste");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton4.setText("Compactación 1");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton6.setText("Compactación 2");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton5.setText("Swaping(Intercambio)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4, jButton5});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(29, 29, 29)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed

        if (Cont < 12) {
            if (txtTamaño.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "El campo de el tamaño a ingresar esta vacio");
            } else {
                int tamaño = Integer.parseInt(txtTamaño.getText());
                if (tamaño < 1 || tamaño > 50) {
                    JOptionPane.showMessageDialog(this, "El tamaño del bloque debe estar entre 1 y 50");
                    txtTamaño.setText("");
                    txtTamaño.requestFocus();
                } else {
                    memo = new Memoria();
                    memo.setDato(Integer.parseInt(txtTamaño.getText()));
                    memo.setEstado(0);
                    acum += tamaño;
                    if (listamemo.setMemoria(memo)) {

                        JOptionPane.showMessageDialog(null, "El Bloque de Memoria fue Guardado");
                        txtTamaño.setText("");
                        txtTamaño.requestFocus();
                    } else {

                        JOptionPane.showMessageDialog(null, "El Bloque de Memoria no fue Posible Guardarlo");
                    }
                    Recorrer();
                }
            }

        } else {
            if (this.InsertarDescendente(listamemo.getPrimero())) {

                JOptionPane.showMessageDialog(this, "No Hay mas memoria disponible");
                acum2 = acum;
                labelTotal2.setText(String.valueOf(acum2));
                txtCantidad.setEnabled(true);
                txtTamaño.setEnabled(false);
                txtTamaño.setText("");
                botonGuardar.setEnabled(false);
                txtCantidad.requestFocus();
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        control++;
        if (Integer.parseInt(txtCantidad.getText()) > acum) {

            JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
            txtCantidad.requestFocus();
            txtCantidad.setText("");

        } else {
            if (Integer.parseInt(txtCantidad.getText()) > acum2) {
                JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible intente el Swaping");
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
                jButton6.setEnabled(false);
                txtCantidad.setEnabled(false);
            } else {
                NodoMemoria cabeza = listamemo.getPrimero();
                primerAjuste(cabeza);
                if (sw == 0) {
                    jButton1.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "No se pudo asignar memoria por primer ajuste!");
                    Cont2 = 0;
                    txtCantidad.setEnabled(false);
                } else {
                    recorrerPintando(cabeza);
                    txtCantidad.setEnabled(true);
                    txtCantidad.requestFocus();
                    txtCantidad.setText("");
                    sw = 0;
                    control = 0;
                }
            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        control++;
        if (Integer.parseInt(txtCantidad.getText()) > acum) {

            JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
            txtCantidad.requestFocus();
            txtCantidad.setText("");

        } else {
            if (Integer.parseInt(txtCantidad.getText()) > acum2) {
                JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible intente el Swaping");
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
                jButton6.setEnabled(false);
            } else {
                NodoMemoria cabeza = listamemo.getPrimero();
                mejorAjuste(cabeza);
                if (sw == 0) {
                    jButton2.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "No se pudo asignar memoria por mejor ajuste!");
                    Cont2 = 0;
                    txtCantidad.setEnabled(false);
                } else {
                    this.recorrerPintando(cabeza);
                    txtCantidad.setEnabled(true);
                    txtCantidad.requestFocus();
                    sw = 0;
                    txtCantidad.setText("");
                    control = 0;
                }

            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtBloque1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloque1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloque1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        control++;
        if (Integer.parseInt(txtCantidad.getText()) > acum) {

            JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
            txtCantidad.requestFocus();
            txtCantidad.setText("");

        } else {
            if (Integer.parseInt(txtCantidad.getText()) > acum2) {
                JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible intente el Swaping");
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
                jButton6.setEnabled(false);
            } else {
                NodoMemoria cabeza = listamemo.getPrimero();
                peorAjuste(cabeza);
                if (sw == 0) {
                    jButton3.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "No se pudo asignar memoria por peor ajuste!");
                    Cont2 = 0;
                    txtCantidad.setEnabled(false);
                } else {
                    this.recorrerPintando(cabeza);
                    txtCantidad.setEnabled(true);
                    txtCantidad.requestFocus();
                    txtCantidad.setText("");
                    sw = 0;
                    control = 0;
                }

            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if (control == 3) {
            control++;
            if (Integer.parseInt(txtCantidad.getText()) > acum) {

                JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
                txtCantidad.requestFocus();
                //  txtCantidad.setText("");

            } else {
                if (Integer.parseInt(txtCantidad.getText()) > acum2) {
                    JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible intente el Swaping");
                    jButton4.setEnabled(false);
                    jButton6.setEnabled(false);
                } else {
                    NodoMemoria cabeza = listamemo.getPrimero();
                    compactacion1(cabeza);
                    if (sw == 0) {
                        jButton4.setEnabled(false);
                        JOptionPane.showMessageDialog(this, "No se pudo asignar memoria por  Compactacion1," + 
                                                      "asigne por compactación2");
                        Cont2 = 0;
                        txtCantidad.setEnabled(false);
                    } else {
                        this.recorrerPintandoCom(cabeza);
                        txtCantidad.setEnabled(true);
                        txtCantidad.requestFocus();
                        txtCantidad.setText("");
                        sw = 0;
                        jButton1.setEnabled(true);
                        jButton2.setEnabled(true);
                        jButton3.setEnabled(true);
                        control = 0;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Asigne memoria primero por primer, mejor y peor ajuste");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        if (control == 4) {
            control++;
            if (Integer.parseInt(txtCantidad.getText()) > acum) {

                JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
                txtCantidad.requestFocus();
                // txtCantidad.setText("");

            } else {
                if (Integer.parseInt(txtCantidad.getText()) > acum2) {
                    JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible intente el Swaping");
                    jButton4.setEnabled(false);
                    jButton6.setEnabled(false);
                } else {
                    NodoMemoria cabeza = listamemo.getPrimero();
                    compactacion2(cabeza);
                    if (sw == 0) {
                        jButton6.setEnabled(false);
                        JOptionPane.showMessageDialog(this, "No se pudo asignar memoria por  Compactacion intelo por swaping");
                        Cont2 = 0;
                        txtCantidad.setEnabled(false);
                    } else {
                        this.recorrerPintandoCom(cabeza);
                        txtCantidad.setEnabled(true);
                        txtCantidad.requestFocus();
                        txtCantidad.setText("");
                        sw = 0;
                        jButton1.setEnabled(true);
                        jButton2.setEnabled(true);
                        jButton3.setEnabled(true);
                        jButton4.setEnabled(true);
                        control = 0;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Asigne memoria primero por primer ajuste, mejor ajuste, peor ajuste y compactacion1");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        if (Integer.parseInt(txtCantidad.getText()) > acum) {

            JOptionPane.showMessageDialog(this, "La cantidad de memoria solicitada no esta disponible.");
            txtCantidad.requestFocus();
            //txtCantidad.setText("");

        } else {
            NodoMemoria cabeza = listamemo.getPrimero();
            this.swaping(cabeza);
            recorrerPintandoCom(cabeza);
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jButton6.setEnabled(true);
            txtCantidad.setEnabled(true);
            txtCantidad.setText("");
            txtCantidad.requestFocus();

            control = 0;
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void botonGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGuardarMouseClicked

// TODO add your handling code here:
    }//GEN-LAST:event_botonGuardarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignaMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignaMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignaMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignaMemoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignaMemoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JLabel labelTotal2;
    private javax.swing.JTextField txtBloque1;
    private javax.swing.JTextField txtBloque10;
    private javax.swing.JTextField txtBloque11;
    private javax.swing.JTextField txtBloque12;
    private javax.swing.JTextField txtBloque2;
    private javax.swing.JTextField txtBloque3;
    private javax.swing.JTextField txtBloque4;
    private javax.swing.JTextField txtBloque5;
    private javax.swing.JTextField txtBloque6;
    private javax.swing.JTextField txtBloque7;
    private javax.swing.JTextField txtBloque8;
    private javax.swing.JTextField txtBloque9;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtEstado1;
    private javax.swing.JTextField txtEstado10;
    private javax.swing.JTextField txtEstado11;
    private javax.swing.JTextField txtEstado12;
    private javax.swing.JTextField txtEstado2;
    private javax.swing.JTextField txtEstado3;
    private javax.swing.JTextField txtEstado4;
    private javax.swing.JTextField txtEstado5;
    private javax.swing.JTextField txtEstado6;
    private javax.swing.JTextField txtEstado7;
    private javax.swing.JTextField txtEstado8;
    private javax.swing.JTextField txtEstado9;
    private javax.swing.JTextField txtTamaño;
    // End of variables declaration//GEN-END:variables

    public void Recorrer() {
        Cont++;
        labelTotal.setText(String.valueOf(acum));
        NodoMemoria temp = listamemo.getPrimero();
        while (temp != null) {
            switch (Cont) {
                case 1:
                    txtBloque1.setText(String.valueOf(memo.getDato()));
                    txtEstado1.setText(String.valueOf(memo.getEstado()));
                    break;
                case 2:
                    txtBloque2.setText(String.valueOf(memo.getDato()));
                    txtEstado2.setText(String.valueOf(memo.getEstado()));
                    break;
                case 3:
                    txtBloque3.setText(String.valueOf(memo.getDato()));
                    txtEstado3.setText(String.valueOf(memo.getEstado()));
                    break;
                case 4:
                    txtBloque4.setText((String.valueOf(memo.getDato())));
                    txtEstado4.setText(String.valueOf(memo.getEstado()));
                    break;
                case 5:
                    txtBloque5.setText((String.valueOf(memo.getDato())));
                    txtEstado5.setText(String.valueOf(memo.getEstado()));
                    break;
                case 6:
                    txtBloque6.setText((String.valueOf(memo.getDato())));
                    txtEstado6.setText(String.valueOf(memo.getEstado()));
                    break;
                case 7:
                    txtBloque7.setText(String.valueOf(memo.getDato()));
                    txtEstado7.setText(String.valueOf(memo.getEstado()));
                    break;
                case 8:
                    txtBloque8.setText(String.valueOf(memo.getDato()));
                    txtEstado8.setText(String.valueOf(memo.getEstado()));
                    break;
                case 9:
                    txtBloque9.setText(String.valueOf(memo.getDato()));
                    txtEstado9.setText(String.valueOf(memo.getEstado()));
                    break;
                case 10:
                    txtBloque10.setText(String.valueOf(memo.getDato()));
                    txtEstado10.setText(String.valueOf(memo.getEstado()));
                    break;

                case 11:
                    txtBloque11.setText(String.valueOf(memo.getDato()));
                    txtEstado11.setText(String.valueOf(memo.getEstado()));
                    break;

                case 12:
                    txtBloque12.setText(String.valueOf(memo.getDato()));
                    txtEstado12.setText(String.valueOf(memo.getEstado()));
                    break;

            }
            temp = temp.getLiga();
        }
    }

    public void recorrerPintando(NodoMemoria temp) {

        for (int j = 1; j < Cont2; j++) {

            temp = temp.getLiga();
        }

        switch (Cont2) {
            case 1:
                txtBloque1.setBackground(Color.red);
                txtEstado1.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado1.setBackground(Color.red);

                break;
            case 2:
                txtBloque2.setBackground(Color.red);
                txtEstado2.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado2.setBackground(Color.red);

                break;
            case 3:
                txtBloque3.setBackground(Color.red);
                txtEstado3.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado3.setBackground(Color.red);

                break;
            case 4:
                txtBloque4.setBackground(Color.red);
                txtEstado4.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado4.setBackground(Color.red);
                break;
            case 5:
                txtBloque5.setBackground(Color.red);
                txtEstado5.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado5.setBackground(Color.red);
                break;
            case 6:
                txtBloque6.setBackground(Color.red);
                txtEstado6.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado6.setBackground(Color.red);
                break;
            case 7:
                txtBloque7.setBackground(Color.red);
                txtEstado7.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado7.setBackground(Color.red);
                break;
            case 8:
                txtBloque8.setBackground(Color.red);
                txtEstado8.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado8.setBackground(Color.red);
                break;
            case 9:
                txtBloque9.setBackground(Color.red);
                txtEstado9.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado9.setBackground(Color.red);
                break;
            case 10:
                txtBloque10.setBackground(Color.red);
                txtEstado10.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado10.setBackground(Color.red);
                break;

            case 11:
                txtBloque11.setBackground(Color.red);
                txtEstado11.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado11.setBackground(Color.red);
                break;

            case 12:
                txtBloque12.setBackground(Color.red);
                txtEstado12.setText(String.valueOf(temp.getMemoria().getEstado()));
                txtEstado12.setBackground(Color.red);
                break;
            default:
                break;
        }
    }

    public void recorrerPintandoCom(NodoMemoria temp) {

        int conta = 0;
        while (temp != null) {
            conta++;
            if (temp.getMemoria().getEstado() == Integer.parseInt(txtCantidad.getText())) {
                switch (conta) {
                    case 1:
                        txtBloque1.setBackground(Color.GREEN);
                        txtEstado1.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado1.setBackground(Color.GREEN);

                        break;
                    case 2:
                        txtBloque2.setBackground(Color.GREEN);
                        txtEstado2.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado2.setBackground(Color.GREEN);

                        break;
                    case 3:
                        txtBloque3.setBackground(Color.GREEN);
                        txtEstado3.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado3.setBackground(Color.GREEN);

                        break;
                    case 4:
                        txtBloque4.setBackground(Color.GREEN);
                        txtEstado4.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado4.setBackground(Color.GREEN);
                        break;
                    case 5:
                        txtBloque5.setBackground(Color.GREEN);
                        txtEstado5.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado5.setBackground(Color.GREEN);
                        break;
                    case 6:
                        txtBloque6.setBackground(Color.GREEN);
                        txtEstado6.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado6.setBackground(Color.GREEN);
                        break;
                    case 7:
                        txtBloque7.setBackground(Color.GREEN);
                        txtEstado7.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado7.setBackground(Color.GREEN);
                        break;
                    case 8:
                        txtBloque8.setBackground(Color.GREEN);
                        txtEstado8.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado8.setBackground(Color.GREEN);
                        break;
                    case 9:
                        txtBloque9.setBackground(Color.GREEN);
                        txtEstado9.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado9.setBackground(Color.GREEN);
                        break;
                    case 10:
                        txtBloque10.setBackground(Color.GREEN);
                        txtEstado10.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado10.setBackground(Color.GREEN);
                        break;

                    case 11:
                        txtBloque11.setBackground(Color.GREEN);
                        txtEstado11.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado11.setBackground(Color.GREEN);
                        break;

                    case 12:
                        txtBloque12.setBackground(Color.GREEN);
                        txtEstado12.setText(String.valueOf(temp.getMemoria().getEstado()));
                        txtEstado12.setBackground(Color.GREEN);
                        break;
                    default:
                        break;
                }
            }
            temp = temp.getLiga();
        }
    }

    public void primerAjuste(NodoMemoria l) {
        Cont2 = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        while (l != null && sw != 1) {
            Cont2++;
            if (bloque <= l.getMemoria().getDato() && l.getMemoria().getEstado() == 0) {
                JOptionPane.showMessageDialog(this, "El espacio de memoria asignado es" + l.getMemoria().getDato() + " En la direccion" + l);
                sw = 1;
                l.getMemoria().setEstado(bloque);
                acum2 -= l.getMemoria().getDato();
                labelTotal2.setText(String.valueOf(acum2));
            }
            l = l.getLiga();
        }

    }

    public void mejorAjuste(NodoMemoria l) {

        Cont2 = 0;
        int Cont3 = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        int menor = 200, frag;
        while (l != null) {
            Cont3++;
            if (bloque <= l.getMemoria().getDato() && l.getMemoria().getEstado() == 0) {
                frag = l.getMemoria().getDato() - bloque;
                if (frag < menor) {
                    menor = frag;
                    auxi = l;
                    Cont2 = Cont3;
                }
            }
            l = l.getLiga();
        }
        if (menor != 200) {
            JOptionPane.showMessageDialog(this, "El espacio de memoria asignado es" + auxi.getMemoria().getDato() + " En la direccion" + auxi);
            sw = 1;
            auxi.getMemoria().setEstado(bloque);
            acum2 -= auxi.getMemoria().getDato();
            labelTotal2.setText(String.valueOf(acum2));
        }
    }

    public void peorAjuste(NodoMemoria L) {
        Cont2 = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        NodoAuxiliar auxiliar;
        if (this.InsertarDescendente(listamemo.getPrimero())) {
            auxiliar = listam.getPrimero();
            while (auxiliar != null && sw != 1) {
                if (auxiliar.getAuxiliar().getDato() >= bloque && auxiliar.getAuxiliar().getEstado() == 0) {
                    auxiliar.getAuxiliar().setEstado(bloque);
                    Cont2 = auxiliar.getAuxiliar().getPos();
                    for (int j = 1; j < Cont2; j++) {

                        L = L.getLiga();
                    }
                    L.getMemoria().setEstado(auxiliar.getAuxiliar().getEstado());
                    sw = 1;
                    JOptionPane.showMessageDialog(this, "El espacio de memoria asignado es" + L.getMemoria().getDato() + " En la direccion" + L);
                    acum2 -= L.getMemoria().getDato();
                    labelTotal2.setText(String.valueOf(acum2));
                }
                auxiliar = auxiliar.getLiga();
            }
        }
    }

    public NodoAuxiliar BuscarDonde(int dato) {
        NodoAuxiliar A = null;

        if (listam.getPrimero().getAuxiliar().getDato() < dato) {
            return A;
        } else {
            NodoAuxiliar auxiliar = listam.getPrimero();
            while (auxiliar != null) {
                if (auxiliar.getAuxiliar().getDato() > dato) {
                    A = auxiliar;
                    auxiliar = auxiliar.getLiga();

                } else {
                    return A;
                }
            }

        }
        return A;
    }

    public boolean InsertarDescendente(NodoMemoria L) {
        listam = new ListaAuxiliar();
        NodoAuxiliar Ant;
        Auxiliar nuevoAuxi;
        int Cont = 0, Dato;
        while (L != null) {
            Cont++;
            nuevoAuxi = new Auxiliar();
            nuevoAuxi.setDato(L.getMemoria().getDato());
            nuevoAuxi.setEstado(L.getMemoria().getEstado());
            nuevoAuxi.setPos(Cont);
            NodoAuxiliar aux = new NodoAuxiliar();
            aux.setAuxiliar(nuevoAuxi);
            if (listam.getPrimero() == null) {
                aux.setLiga(null);
                listam.setPrimero(aux);
            } else {
                Ant = BuscarDonde(aux.getAuxiliar().getDato());
                if (Ant == null) {
                    aux.setLiga(listam.getPrimero());
                    listam.setPrimero(aux);
                } else {
                    aux.setLiga(Ant.getLiga());
                    Ant.setLiga(aux);
                }
            }
            L = L.getLiga();
        }
        return true;
    }

    public boolean bajarAlDisco(Memoria L) {
        Auxiliar nuevoAuxi;

        ContDisco++;
        nuevoAuxi = new Auxiliar();
        nuevoAuxi.setDato(L.getDato());
        nuevoAuxi.setEstado(L.getEstado());
        nuevoAuxi.setPos(ContDisco);
        NodoAuxiliar aux = new NodoAuxiliar();
        aux.setAuxiliar(nuevoAuxi);
        acum2 += L.getDato();
        if (listadisco.getPrimero() == null) {
            aux.setLiga(null);
            listadisco.setPrimero(aux);
        } else {
            aux.setLiga(listadisco.getPrimero());
            listadisco.setPrimero(aux);
        }
        return true;
    }

    public void compactacion1(NodoMemoria L) {
        sw = 0;
        int suma, con = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        NodoMemoria aux;
        while (L != null && sw != 1) {
            con += 1;
            if (L.getMemoria().getEstado() == 0) {
                aux = L.getLiga();
                if (aux != null) {
                    while (aux != null && sw != 1) {
                        con += 1;
                        if (aux.getMemoria().getEstado() == 0) {
                            suma = aux.getMemoria().getDato() + L.getMemoria().getDato();
                            if (bloque <= suma) {
                                L.getMemoria().setEstado(bloque);
                                aux.getMemoria().setEstado(bloque);
                                sw = 1;
                                acum2 -= suma;
                                labelTotal2.setText(String.valueOf(acum2));
                                JOptionPane.showMessageDialog(this, "Los espacios de memoria asignados son: \n" + L.getMemoria().getDato() + "En La pisicion " + L
                                        + "\n" + aux.getMemoria().getDato() + " En la posicion " + aux);
                            } else {
                                if (aux != null) {
                                    L = aux.getLiga();
                                    aux = null;
                                }

                            }
                        } else {
                            aux = aux.getLiga();
                        }
                    }
                }else{
                    L = null;
                }
                                 
            } else {
                L = L.getLiga();
            }
        }
    }

    public void compactacion2(NodoMemoria l) {

        Cont2 = 0;
        NodoMemoria auxil, p;
        int suma = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        while (l != null && sw != 1) {
            Cont2++;
            if (l.getMemoria().getEstado() == 0) {
                l.getMemoria().setEstado(bloque);
                suma += l.getMemoria().getDato();
                auxil = l.getLiga();
                while (auxil != null && sw != 1) {
                    Cont2++;
                    if (auxil.getMemoria().getEstado() == 0) {
                        auxil.getMemoria().setEstado(bloque);
                        suma += auxil.getMemoria().getDato();
                        if (bloque <= suma) {
                            sw = 1;
                            acum2 -= suma;
                            labelTotal2.setText(String.valueOf(acum2));
                        }
                    } else {
                        auxil = auxil.getLiga();
                    }
                }
                l = null;
            } else {
                l = l.getLiga();
            }
        }

        if (sw == 0) {
            p = listamemo.getPrimero();
            while (p != null) {
                if (p.getMemoria().getEstado() == bloque) {
                    p.getMemoria().setEstado(0);
                }
                p = p.getLiga();
            }
        } else {
            p = listamemo.getPrimero();
            while (p != null) {
                if (p.getMemoria().getEstado() == bloque) {
                    JOptionPane.showMessageDialog(this, "El espacio de memoria asignado es" + p.getMemoria().getDato() + " En la direccion" + p);
                }
                p = p.getLiga();
            }
        }
    }

    public void swaping(NodoMemoria L) {
        int suma = 0;
        int bloque = Integer.parseInt(txtCantidad.getText());
        while (L != null) {
            if (L.getMemoria().getEstado() == 0) {
                suma += L.getMemoria().getDato();
                L.getMemoria().setEstado(bloque);
            }
            L = L.getLiga();
        }
        L = listamemo.getPrimero();
        while (L != null && sw != 1) {
            if (L.getMemoria().getEstado() != bloque) {
                if (this.bajarAlDisco(L.getMemoria())) {
                    JOptionPane.showMessageDialog(this, "Se bajaron procesos a la memoria virtual");
                }
                suma += L.getMemoria().getDato();
                L.getMemoria().setEstado(bloque);
                if (bloque <= suma) {
                    sw = 1;
                    JOptionPane.showMessageDialog(this, "Se asigno memoria");
                    acum2 -= suma;
                    labelTotal2.setText(String.valueOf(acum2));
                }

            }
            L = L.getLiga();
        }
        L = listamemo.getPrimero();
        while (L != null) {
            if (L.getMemoria().getEstado() == bloque) {
                JOptionPane.showMessageDialog(this, "El espacio de memoria asignado es" + L.getMemoria().getDato() + " En la direccion" + L);
            }
            L = L.getLiga();
        }
    }
}
